def rtheta(file,PA,incl,size,offs=[0.,0.]):
    ''' Create a R vs theta map of an image. Theta is the azimuthal angle in the deprojected disk. This projection is useful when looking for azimuthal variations in flux.

    :param file:
    Name of the ALMA image file to use

    :param PA:
    Position angle, in degrees, east of north

    :param incl:
    Inclination, in degrees.

    :param size:
    Size, in arcseconds, of the emitting area to map (ie size=10 restricts to a 10"x10" box)

    :param offs:
    Offset in RA and Dec, in units of arcseconds, for the center of the disk

'''

    from astropy.io import fits
    import matplotlib.pyplot as plt
    import numpy as np

    alma = fits.open(file)
    im = alma[0].data.squeeze()
    hdr = alma[0].header

    ra = 3600*hdr['cdelt1']*(np.arange(hdr['naxis1'])-hdr['naxis1']/2.-0.5)
    #imx = size #image size in arcseconds
    de = -1*ra
    ra -=offs[0]
    de -=offs[1]
    #ira = np.abs(ra) < imx/2.
    #ide = np.abs(de) < imx/2.
    #im_tmp = im[ira,:]
    #im_tmp = im_tmp[:,ide]
    #ra = ra[ira]
    #de = de[ide]

    abeam,bbeam,phi = hdr['bmaj']/2*3600.,hdr['bmin']/2*3600.,np.radians(90+hdr['bpa'])
    t=np.linspace(0,2*np.pi,100)
    xbeam = -(size/2.-1)+abeam*np.cos(t)*np.cos(phi)-bbeam*np.sin(t)*np.sin(phi)
    ybeam = -(size/2.-1)+abeam*np.cos(t)*np.sin(phi)+bbeam*np.sin(t)*np.cos(phi)


    ram,dem = np.meshgrid(ra,de)
    major = (ram*np.cos(np.radians(90-PA))+dem*np.sin(np.radians(90-PA)))
    minor = (ram*np.sin(np.radians(90-PA))-dem*np.cos(np.radians(90-PA)))/np.sin(np.radians(90-incl))
    dist = np.sqrt(major**2+minor**2)
    
    theta = np.degrees(np.arctan2(minor,major))
    theta[theta<0]+=360
    
    #plt.figure()
    #cs = plt.contourf(ram,dem,im,100,cmap=plt.cm.afmhot)
    #plt.contour(ram,dem,dist,np.arange(0,1,.1),colors='w',linewidths=3)
    #plt.xlim(size,-size)
    #plt.ylim(-size,size)

    w = (dist<size)
    levels = np.arange(101)/100.*(im[w].max()-im[w].min())+im[w].min()

    plt.figure()
    cs=plt.contourf(theta,dist,im*1e3,levels*1e3,cmap=plt.cm.copper)
    plt.colorbar(cs)
    plt.ylim(0,size)
    ax = plt.gca()
#    plt.xlabel('Theta (degrees)',fontweight='bold',fontsize=16)
#    plt.ylabel('R (arcseconds)',fontweight='bold',fontsize=16)
    for tick in ax.xaxis.get_major_ticks():
        tick.label1.set_fontsize(14)
        tick.label1.set_fontweight('bold')
    for tick in ax.yaxis.get_major_ticks():
        tick.label1.set_fontsize(14)
        tick.label1.set_fontweight('bold')
